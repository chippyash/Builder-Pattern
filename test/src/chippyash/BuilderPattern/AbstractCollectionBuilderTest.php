<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-20 at 07:45:39.
 */

namespace chippyash\Test\BuilderPattern;

class AbstractCollectionBuilderTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Mock
     * @var AbstractCollectionBuilder
     */
    protected $object;

    protected function setUp()
    {
        $this->object = $this->getMockForAbstractClass('chippyash\BuilderPattern\AbstractCollectionBuilder');
    }

    public function testBuildReturnsTrueIfCollectionBuildsSuccessfully()
    {
        $builder = $this->getMock('chippyash\BuilderPattern\BuilderInterface');
        $builder->expects($this->once())
                ->method('build')
                ->will($this->returnValue(true));
        $this->object->addBuilder($builder);
        
        $this->assertTrue($this->object->build());
    }

    public function testBuildReturnsFalseIfCollectionBuildFails()
    {
        $builder = $this->getMock('chippyash\BuilderPattern\BuilderInterface');
        $builder->expects($this->once())
                ->method('build')
                ->will($this->returnValue(false));
        $this->object->addBuilder($builder);
        
        $this->assertFalse($this->object->build());
    }

    public function testWeCanAddABuilder()
    {
        $builder = $this->getMock('chippyash\BuilderPattern\BuilderInterface');
        $this->object->addBuilder($builder);
        
        $this->assertEquals([$builder], $this->object->getCollection());
    }

    public function testWeCanSetAndGetTheCollection()
    {
        $builder = $this->getMock('chippyash\BuilderPattern\BuilderInterface');
        $this->assertInstanceOf('chippyash\BuilderPattern\AbstractCollectionBuilder', $this->object->setCollection([$builder]));
        $this->assertEquals([$builder], $this->object->getCollection());
    }
    
    public function testCanSetModifier()
    {
        $modifier = $this->getMock('Zend\EventManager\EventManagerAwareInterface');
        $this->assertEquals($this->object, $this->object->setModifier($modifier));
        
        $refl = new \ReflectionObject($this->object);
        $prop = $refl->getProperty('modifier');
        $prop->setAccessible(true);
        $this->assertEquals($modifier, $prop->getValue($this->object));
    }

    public function testCanCallModifyToTriggerEvents()
    {
        $modifier = $this->getMock('Zend\EventManager\EventManagerAwareInterface');
        $modifier->expects($this->once())
                ->method('getEventManager')
                ->willReturn(new \Zend\EventManager\EventManager());
        $this->object->setModifier($modifier);
        
        $this->assertInstanceOf('Zend\EventManager\ResponseCollection', $this->object->modify());
    }


}
